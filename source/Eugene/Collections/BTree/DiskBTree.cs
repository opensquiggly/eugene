namespace Eugene.Collections.BTree;

public class DiskBTree<TKey, TData> 
  where TKey : struct 
  where TData : struct
{
  // /////////////////////////////////////////////////////////////////////////////////////////////
  // Constructors
  // /////////////////////////////////////////////////////////////////////////////////////////////

  public DiskBTree(DiskBTreeFactory<TKey, TData> factory, long address)
  {
    Factory = factory;
    Address = address;
    
    // KeyArrayFactory = factory.DiskBlockManager.ArrayManager.CreateFactory<TKey>(...);
  }

  // /////////////////////////////////////////////////////////////////////////////////////////////
  // Public Properties
  // /////////////////////////////////////////////////////////////////////////////////////////////

  public long Address { get; }

  public DiskBTreeFactory<TKey, TData> Factory { get; }
  
  // private DiskArrayFactory<TKey> KeyArrayFactory { get; }
  
  // /////////////////////////////////////////////////////////////////////////////////////////////
  // Private Methods
  // /////////////////////////////////////////////////////////////////////////////////////////////

  private void InsertNonFull(BTreeNodeBlock node, TKey key, TData data)
  {
    if (node.IsLeafNode != 0)
    {
      // var keysArray = 
    }
    else
    {
      
    }
  }
  
  // /////////////////////////////////////////////////////////////////////////////////////////////
  // Public Methods
  // /////////////////////////////////////////////////////////////////////////////////////////////

  public void FindNode(TKey key)
  {
  }

  public void Insert(TKey key, TData data)
  {
  }
}
